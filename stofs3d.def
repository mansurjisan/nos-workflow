Bootstrap: docker
From: rockylinux/rockylinux:9-ubi

%arguments
    SLURM_VERSION=slurm-24-11-1-1
    ECFLOW_VERSION=5.6.0
    ADCIRC_VERSION=56.0.3
    SCHISM_VERSION=5.11.0
    GOSU_VERSION=1.17

%files
    containers/cgroup.conf /opt/slurm/etc/cgroup.conf
    containers/slurm.conf /opt/slurm/etc/slurm.conf
    containers/slurmdbd.conf /opt/slurm/etc/slurmdbd.conf
    containers/get_slurm_node.py /opt/slurm/etc/get_slurm_node.py
    containers/environment.sh /home/wcoss2/environment.sh
    containers/run.ver /home/wcoss2/sandbox/stofs3d/versions/run.ver
    containers/sample_compaths.list /lfs/h1/ops/prod/config/compaths.list

    # Copy source code and scripts
    src /home/wcoss2/stofs_workflow/src
    pyproject.toml /home/wcoss2/stofs_workflow/pyproject.toml
    examples/stofs_scripts /home/wcoss2/data/stofs_scripts
    examples/config_adcirc.yaml /home/wcoss2/config_adcirc.yaml
    examples/config_schism.yaml /home/wcoss2/config_schism.yaml

    # Copy ush files
    ush/stofs_3d_atl /home/wcoss2/sandbox/stofs3d/ush/stofs_3d_atl

    # Copy exec files (pre-built as backup)
    exec/stofs_3d_atl /home/wcoss2/sandbox/stofs3d/exec_backup/stofs_3d_atl

    # Copy STOFS source code - CRITICAL for building capability
    sorc /tmp/stofs_sorc

%post
    # Set environment variables (hardcoded values)
    export SLURM_VERSION="slurm-24-11-1-1"
    export ECFLOW_VERSION="5.6.0"
    export ADCIRC_VERSION="56.0.3"
    export SCHISM_VERSION="5.11.0"
    export GOSU_VERSION="1.17"

    # Disable HDF5 file locking to avoid NetCDF HDF errors
    export HDF5_USE_FILE_LOCKING=FALSE

    # Update system and install EPEL
    dnf update -y && dnf install -y epel-release

    # Install development tools and libraries
    dnf install -y --enablerepo=crb which gcc gcc-c++ gcc-gfortran make cmake git \
                   openmpi openmpi-devel \
                   boost-devel boost-system boost-filesystem boost-timer boost-date-time boost-program-options boost-chrono \
                   netcdf netcdf-fortran netcdf-devel netcdf-fortran-devel \
                   libtool ncurses-devel expat-devel openssl-devel python3-devel \
                   automake expat-devel wget hostname zlib-devel \
                   jasper udunits2 nco ImageMagick proj proj-devel \
                   bzip2 gnupg munge munge-devel psmisc bash-completion json-c http-parser \
                   mysql mysql-server mysql-devel libjpeg-turbo libjpeg-turbo-devel \
                   environment-modules emacs sudo

    # Install Python packages
    pip install xarray pyyaml matplotlib cartopy netCDF4 pyshp more-itertools pytest pytz scikit-learn dateutils pyparsing \
                cftime termcolor shapely numpy pandas pluggy geopy attrs pyproj cython schema

    # Install SLURM job scheduler
    set -x
    git clone -b ${SLURM_VERSION} --single-branch --depth=1 https://github.com/SchedMD/slurm.git
    cd slurm
    ./configure --prefix=/opt/slurm --sysconfdir=/opt/slurm/etc \
        --with-mysql_config=/usr/bin --libdir=/opt/slurm/lib64 \
        --enable-cgroupv2=no
    make install
    install -D -m644 etc/cgroup.conf.example /opt/slurm/etc/cgroup.conf.example
    install -D -m644 etc/slurm.conf.example /opt/slurm/etc/slurm.conf.example
    install -D -m644 etc/slurmdbd.conf.example /opt/slurm/etc/slurmdbd.conf.example
    install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh
    cd /
    rm -rf slurm
    groupadd -r --gid=990 slurm
    useradd -r -g slurm --uid=990 slurm
    mkdir /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/run/slurmdbd \
        /var/lib/slurmd \
        /var/log/slurm \
        /data
    touch /var/lib/slurmd/node_state \
        /var/lib/slurmd/front_end_state \
        /var/lib/slurmd/job_state \
        /var/lib/slurmd/resv_state \
        /var/lib/slurmd/trigger_state \
        /var/lib/slurmd/assoc_mgr_state \
        /var/lib/slurmd/assoc_usage \
        /var/lib/slurmd/qos_usage \
        /var/lib/slurmd/fed_mgr_state
    chown -R slurm:slurm /var/*/slurm*
    chown -R munge:munge /run/munge
    chmod go-rw /run/munge
    /sbin/create-munge-key

    # Build and install ECFLOW
    mkdir ecflow_build && cd ecflow_build
    wget -O ecflow.tar.gz https://confluence.ecmwf.int/download/attachments/8650755/ecFlow-${ECFLOW_VERSION}-Source.tar.gz?api=v2
    tar -xvf ecflow.tar.gz && rm ecflow.tar.gz
    mv ecFlow* ecflow
    cd ecflow && mkdir build && cd build
    cmake .. -DENABLE_UI=OFF \
        -DBoost_ROOT=/usr \
        -DENABLE_TESTS=OFF \
        -DENABLE_STATIC_BOOST_LIBS=OFF \
        -DCMAKE_INSTALL_PREFIX=/opt/ecflow
    make -j4 && make install
    cd /
    rm -rf ecflow_build

    # Copy fortran netcdf.mod
    cp /usr/lib64/gfortran/modules/netcdf.mod /usr/include/netcdf.mod

    # Install ADCIRC
    git clone --depth 1 --branch v${ADCIRC_VERSION} https://github.com/adcirc/adcirc
    mkdir adcirc_build
    cd adcirc_build
    export PATH=$PATH:/usr/lib64/openmpi/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64
    cmake ../adcirc -DCMAKE_INSTALL_PREFIX=/opt/models/adcirc \
        -DENABLE_OUTPUT_NETCDF=ON \
        -DBUILD_ADCIRC=ON \
        -DBUILD_ADCPREP=ON \
        -DBUILD_PADCIRC=ON \
        -DNETCDFHOME=/usr \
        -DENABLE_GRIB2=ON \
        -DENABLE_DATETIME=ON
    make && make install
    cd /
    rm -rf adcirc adcirc_build

    # Install SCHISM
    [ -e /usr/bin/python ] || ln -s /usr/bin/python3 /usr/bin/python
    git clone --depth 1 --branch v${SCHISM_VERSION} https://github.com/schism-dev/schism
    mkdir schism_build
    cd schism_build
    export PATH=$PATH:/usr/lib64/openmpi/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64
    cmake ../schism/src -DCMAKE_INSTALL_PREFIX=/opt/models/schism -DBLD_STANDALONE=ON
    make && mkdir /opt/models/schism && mv bin /opt/models/schism/bin
    cd /
    rm -rf schism schism_build

    # Enable CRB and update metadata
    dnf config-manager --set-enabled crb && dnf makecache

    # Install additional libraries
    dnf install -y jasper jasper-devel
    dnf install -y libpng libpng-devel
    dnf install -y libjpeg-turbo libjpeg-turbo-devel
    dnf install -y blas-devel lapack-devel openblas-devel
    dnf install -y zlib-devel bzip2-devel

    # Clean to reduce image size
    dnf clean all

    # Create symbolic links for libraries
    ln -sf /usr/lib64/libjasper.so.4 /usr/lib64/libjasper.so
    ln -sf /usr/lib64/libpng16.so.16 /usr/lib64/libpng.so

    # Build NCEP libraries
    set -x
    # Build BACIO library
    git clone --depth 1 https://github.com/NOAA-EMC/NCEPLIBS-bacio.git
    cd NCEPLIBS-bacio
    mkdir build && cd build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/ncep -DBUILD_TESTING=OFF
    make && make install
    cd / && rm -rf NCEPLIBS-bacio

    # Build W3EMC library
    git clone --depth 1 https://github.com/NOAA-EMC/NCEPLIBS-w3emc.git
    cd NCEPLIBS-w3emc
    mkdir build && cd build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/ncep -DBUILD_TESTING=OFF -DCMAKE_PREFIX_PATH=/opt/ncep
    make && make install
    cd / && rm -rf NCEPLIBS-w3emc

    # Build W3NCO library
    git clone --depth 1 https://github.com/NOAA-EMC/NCEPLIBS-w3nco.git
    cd NCEPLIBS-w3nco
    mkdir build && cd build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/ncep -DBUILD_TESTING=OFF -DCMAKE_PREFIX_PATH=/opt/ncep
    make && make install
    cd / && rm -rf NCEPLIBS-w3nco

    # Build prod_util
    git clone --depth 1 https://github.com/NOAA-EMC/NCEPLIBS-prod_util.git
    cd NCEPLIBS-prod_util
    mkdir build && cd build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/ncep -DBUILD_TESTING=OFF -DCMAKE_PREFIX_PATH=/opt/ncep
    make && make install
    cd / && rm -rf NCEPLIBS-prod_util

    # Build IP library
    git clone --depth 1 https://github.com/NOAA-EMC/NCEPLIBS-ip.git
    cd NCEPLIBS-ip
    mkdir build && cd build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/ncep -DBUILD_TESTING=OFF -DCMAKE_PREFIX_PATH=/opt/ncep
    make && make install
    cd / && rm -rf NCEPLIBS-ip

    # Build G2C library
    git clone --depth 1 https://github.com/NOAA-EMC/NCEPLIBS-g2c.git
    cd NCEPLIBS-g2c
    mkdir build && cd build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/ncep -DBUILD_TESTING=OFF -DCMAKE_PREFIX_PATH=/opt/ncep
    make && make install
    cd / && rm -rf NCEPLIBS-g2c

    # Build G2 library
    git clone --depth 1 https://github.com/NOAA-EMC/NCEPLIBS-g2.git
    cd NCEPLIBS-g2
    mkdir build && cd build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/ncep -DBUILD_TESTING=OFF -DCMAKE_PREFIX_PATH=/opt/ncep
    make && make install
    cd / && rm -rf NCEPLIBS-g2

    # Build BUFR library
    git clone --depth 1 https://github.com/NOAA-EMC/NCEPLIBS-bufr.git
    cd NCEPLIBS-bufr
    mkdir build && cd build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/ncep -DBUILD_TESTING=OFF -DCMAKE_PREFIX_PATH=/opt/ncep
    make && make install
    cd / && rm -rf NCEPLIBS-bufr

    # Build wgrib2
    cd /
    wget https://www.ftp.cpc.ncep.noaa.gov/wd51we/wgrib2/wgrib2.tgz
    tar -xzf wgrib2.tgz
    cd grib2
    export CC=gcc
    export FC=gfortran
    make
    mkdir -p /opt/wgrib2/bin
    cp wgrib2/wgrib2 /opt/wgrib2/bin/
    cd /
    rm -rf wgrib2.tgz grib2

    # Create symbolic link for wgrib2
    ln -s /opt/wgrib2/bin/wgrib2 /usr/local/bin/wgrib2

    # Set permissions
    chmod -R a+rx /opt/ncep/bin

#  BUILD STOFS EXECUTABLES FROM SOURCE

    echo "=============================================="
    echo "STARTING STOFS PREPPROCESSING SOURCE BUILDING"
    echo "=============================================="
    
    # Find the actual stofs_sorc location
    STOFS_SORC_DIR=$(find /tmp -name "stofs_sorc" -type d 2>/dev/null | head -1)
    
    if [ -z "$STOFS_SORC_DIR" ] || [ ! -d "$STOFS_SORC_DIR" ]; then
        echo "✗ ERROR: Cannot find stofs_sorc directory"
        find /tmp -name "*stofs*" -type d 2>/dev/null || echo "No stofs directories found"
        exit 1
    fi
    
    echo "Found STOFS source at: $STOFS_SORC_DIR"
    ls -la "$STOFS_SORC_DIR/"

    # Create directories for STOFS building
    mkdir -p /opt/stofs/exec
    mkdir -p /home/wcoss2/sandbox/stofs3d/exec/stofs_3d_atl

    # Set up build environment
    export PATH=$PATH:/usr/lib64/openmpi/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64
    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/ncep/lib/pkgconfig

    # Build stofs_3d_atl_tide_fac
    echo "Building stofs_3d_atl_tide_fac..."
    cd "$STOFS_SORC_DIR/stofs_3d_atl_tide_fac.fd"
    make clean || true
    make
    cp -p stofs_3d_atl_tide_fac /opt/stofs/exec/
    cp -p stofs_3d_atl_tide_fac /home/wcoss2/sandbox/stofs3d/exec/stofs_3d_atl/
    echo "Built stofs_3d_atl_tide_fac"

    # Build stofs_3d_atl_netcdf2shef
    echo "Building stofs_3d_atl_netcdf2shef..."
    cd "$STOFS_SORC_DIR/stofs_3d_atl_netcdf2shef.fd"
    make clean || true
    make
    cp -p stofs_3d_atl_netcdf2shef /opt/stofs/exec/
    cp -p stofs_3d_atl_netcdf2shef /home/wcoss2/sandbox/stofs3d/exec/stofs_3d_atl/
    echo "Built stofs_3d_atl_netcdf2shef"

    # Build stofs_3d_atl_gen_3Dth_from_hycom
    echo "Building stofs_3d_atl_gen_3Dth_from_hycom..."
    cd "$STOFS_SORC_DIR/stofs_3d_atl_gen_3Dth_from_hycom.fd"
    make clean || true
    make
    cp -p stofs_3d_atl_gen_3Dth_from_hycom /opt/stofs/exec/
    cp -p stofs_3d_atl_gen_3Dth_from_hycom /home/wcoss2/sandbox/stofs3d/exec/stofs_3d_atl/
    echo "Built stofs_3d_atl_gen_3Dth_from_hycom"

    # Build stofs_3d_atl_gen_nudge_from_hycom
    echo "Building stofs_3d_atl_gen_nudge_from_hycom..."
    cd "$STOFS_SORC_DIR/stofs_3d_atl_gen_nudge_from_hycom.fd"
    make clean || true
    make
    cp -p stofs_3d_atl_gen_nudge_from_hycom /opt/stofs/exec/
    cp -p stofs_3d_atl_gen_nudge_from_hycom /home/wcoss2/sandbox/stofs3d/exec/stofs_3d_atl/
    echo "Built stofs_3d_atl_gen_nudge_from_hycom"

    # Preserve source for development
    mkdir -p /home/wcoss2/stofs_source
    cp -r "$STOFS_SORC_DIR" /home/wcoss2/stofs_source/
    
    echo "STOFS building completed successfully!"
    echo "Built executables:"
    ls -la /opt/stofs/exec/
    echo "=============================================="

    # Install gosu
    set -ex
    wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64"
    wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64.asc"
    export GNUPGHOME="$(mktemp -d)"
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu
    rm -rf "${GNUPGHOME}" /usr/local/bin/gosu.asc
    chmod +x /usr/local/bin/gosu
    gosu nobody true

    # Initialize MySQL database
    chown -R mysql:mysql /var/lib/mysql
    chown mysql:mysql /var/run/mysqld
    chown mysql:mysql /usr/libexec/mysqld
    /usr/libexec/mysqld --initialize-insecure --user=mysql --datadir=/var/lib/mysql

    # Add slurm user and create directories
    chown -R slurm:slurm /opt/slurm/etc
    chmod go-rwx /opt/slurm/etc/slurmdbd.conf

    # Set root password
    echo "root:root" | chpasswd

    # Add wcoss2 user and setup
    useradd -m wcoss2
    chown wcoss2:wcoss2 /home/wcoss2
    echo "wcoss2 ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/wcoss2
    chmod 0440 /etc/sudoers.d/wcoss2

    # Setup .bashrc with color support and aliases
    echo '# Enable color support for ls and also add handy aliases' >> /home/wcoss2/.bashrc
    echo 'if [ -x /usr/bin/dircolors ]; then' >> /home/wcoss2/.bashrc
    echo '    eval "$(dircolors -b)"' >> /home/wcoss2/.bashrc
    echo '    alias ls="ls --color=auto"' >> /home/wcoss2/.bashrc
    echo '    alias dir="dir --color=auto"' >> /home/wcoss2/.bashrc
    echo '    alias vdir="vdir --color=auto"' >> /home/wcoss2/.bashrc
    echo '    alias grep="grep --color=auto"' >> /home/wcoss2/.bashrc
    echo '    alias fgrep="fgrep --color=auto"' >> /home/wcoss2/.bashrc
    echo '    alias egrep="egrep --color=auto"' >> /home/wcoss2/.bashrc
    echo 'fi' >> /home/wcoss2/.bashrc
    echo 'alias ll="ls -lt --color=auto"' >> /home/wcoss2/.bashrc
    chown wcoss2:wcoss2 /home/wcoss2/.bashrc

    # Create required directory structure
    mkdir -p /home/wcoss2/sandbox/stofs3d/scripts/stofs_3d_atl
    mkdir -p /home/wcoss2/sandbox/stofs3d/ush/stofs_3d_atl
    mkdir -p /home/wcoss2/sandbox/stofs3d/ush/stofs_3d_atl/pysh
    mkdir -p /home/wcoss2/sandbox/stofs3d/fix/stofs_3d_atl
    mkdir -p /lfs/h1/ops/prod/com/nwm/v3.0
    mkdir -p /lfs/h1/ops/prod/com/
    mkdir -p /lfs/h1/ops/prod/dcom/
    mkdir -p /home/wcoss2/sandbox/dcom_root
    mkdir -p /home/wcoss2/sandbox/stofs3d/dataroot/stofs_3d_atl_run_12_prod_v2.1/outputs
    mkdir -p /home/wcoss2/sandbox/date
    mkdir -p /home/wcoss2/sandbox/stofs3d/versions
    mkdir -p /home/wcoss2/sandbox/stofs3d/prev
    mkdir -p /home/wcoss2/sandbox/stofs3d/rerun
    mkdir -p /home/wcoss2/dcom_root

    # Dummy up WCOSS paths
    mkdir -p /lfs/h1/gfs/v16.3
    mkdir -p /lfs/h1/hrrr/v4.1
    mkdir -p /lfs/h1/nwm/v3.0
    mkdir -p /lfs/h1/rtofs/v2.4
    mkdir -p /lfs/h1/ops/prod/config

    # Add OpenMPI binaries to system PATH
    echo 'export PATH=$PATH:/usr/lib64/openmpi/bin' >> /etc/bashrc
    echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/openmpi/lib' >> /etc/bashrc
    ln -sf /usr/lib64/openmpi/bin/mpiexec /usr/bin/mpiexec
    ln -sf /usr/lib64/openmpi/bin/mpirun /usr/bin/mpirun

    # Set ownership
    chown -R wcoss2:wcoss2 /home/wcoss2/sandbox
    chown -R wcoss2:wcoss2 /home/wcoss2/stofs_source

    # Generate modulefiles
    mkdir -p /usr/share/modulefiles/models/adcirc
    mkdir -p /usr/share/modulefiles/models/schism
    mkdir -p /usr/share/modulefiles/ecflow
    mkdir -p /usr/share/modulefiles/slurm
    mkdir -p /usr/share/modulefiles/ncep

    # Create ADCIRC module
    cat > /usr/share/modulefiles/models/adcirc/${ADCIRC_VERSION} << 'EOF'
#%Module 1.0
#
#  ADCIRC module for use with environment-modules package:
#
conflict		adcirc
module load mpi
prepend-path 		PATH 		/opt/models/adcirc/bin
EOF

    # Create SCHISM module
    cat > /usr/share/modulefiles/models/schism/${SCHISM_VERSION} << 'EOF'
#%Module 1.0
#
#  SCHISM module for use with environment-modules package:
#
conflict		schism
module load mpi
prepend-path 		PATH 		/opt/models/schism/bin
EOF

    # Create ecFlow module
    cat > /usr/share/modulefiles/ecflow/${ECFLOW_VERSION} << 'EOF'
#%Module 1.0
#
#  ecFlow module for use with environment-modules package:
#
conflict		ecflow
prepend-path 		PATH 		/opt/ecflow/bin
prepend-path 		LD_LIBRARY_PATH 		/opt/ecflow/lib
prepend-path     PYTHONPATH    /opt/ecflow/lib/python3.9/site-packages
setenv ECF_HOST localhost
setenv ECF_PORT 3121
EOF

    # Create SLURM module
    cat > /usr/share/modulefiles/slurm/24.11.1.1 << 'EOF'
#%Module 1.0
#
#  slurm module for use with environment-modules package:
#
conflict		slurm
prepend-path 		PATH 		/opt/slurm/bin
EOF

    # Create NCEP module
    cat > /usr/share/modulefiles/ncep/develop << 'EOF'
#%Module 1.0
#
#  Modulefile for NCEP libs
#
conflict ncep
prepend-path PATH /opt/ncep/bin
EOF

    # Add module loads to environment initialization
    cat >> /etc/environment-modules/initrc << 'EOF'
module load slurm
module load ecflow
module load ncep
EOF

    # Install CFP replacement (inline since script missing)
    echo "Installing CFP replacement..."
    cat > /usr/bin/cfp << 'EOF'
#!/bin/bash
#
# CFP Replacement Script (v2.0.4 compatible)
# This script mimics the behavior of the WCOSS2 cfp utility
#

# Print version information
VERSION="2.0.4"

# Check arguments
if [ "$#" -ne 1 ]; then
    echo "Error: Invalid number of arguments"
    echo "Usage: cfp <command_file>"
    exit 1
fi

COMMAND_FILE="$1"

# Check if the command file exists
if [ ! -f "$COMMAND_FILE" ]; then
    echo "Error: Command file '$COMMAND_FILE' not found"
    exit 1
fi

# Get environment variables
CFP_VERBOSE=${CFP_VERBOSE:-}
CFP_DOALL=${CFP_DOALL:-}
CFP_DELAY=${CFP_DELAY:-0}
CFP_MINMEM=${CFP_MINMEM:-0}

# Print verbose information if requested
if [ -n "$CFP_VERBOSE" ]; then
    echo "CFP_VERBOSE: Enabled"
    echo "CFP_DOALL: ${CFP_DOALL:+Enabled}"
    echo "CFP_DELAY: $CFP_DELAY seconds"
    echo "CFP_MINMEM: $CFP_MINMEM GB"
    echo "Command file: $COMMAND_FILE"
fi

# Count total commands
TOTAL_CMDS=$(grep -v '^[[:space:]]*#' "$COMMAND_FILE" | grep -v '^[[:space:]]* | wc -l)
echo "Total commands to execute: $TOTAL_CMDS"

# Read and process commands
CMD_NUM=0
FAILED=0

# Process all commands sequentially
while IFS= read -r CMD || [[ -n "$CMD" ]]; do
    # Skip empty lines and comments
    if [[ -z "$CMD" || "$CMD" =~ ^[[:space:]]*# ]]; then
        continue
    fi

    CMD_NUM=$((CMD_NUM + 1))
    echo "[$CMD_NUM/$TOTAL_CMDS] Executing: $CMD"

    # Execute the command
    eval "$CMD"
    STATUS=$?

    if [ $STATUS -ne 0 ]; then
        echo "Command $CMD_NUM failed with exit code $STATUS"
        FAILED=$((FAILED + 1))

        # If CFP_DOALL is not set, stop processing
        if [ -z "$CFP_DOALL" ]; then
            echo "Error detected and CFP_DOALL not set. Stopping."
            break
        fi
    fi
done < <(grep -v '^[[:space:]]*#' "$COMMAND_FILE" | grep -v '^[[:space:]]*)

# Final status report
echo "CFP execution completed"
echo "Total commands executed: $CMD_NUM"
echo "Failed commands: $FAILED"

# Return non-zero if any command failed
if [ $FAILED -gt 0 ]; then
    exit 1
fi

exit 0
EOF

    chmod +x /usr/bin/cfp

    # Create MPI wrapper (inline since script missing)
    echo "Creating MPI wrapper..."
    cat > /usr/bin/mpiexec_cfp << 'EOF'
#!/bin/bash
#
# mpiexec wrapper for use with cfp
# This script ignores MPI-specific arguments and just runs the command
#

# Find the command to execute (last argument)
for arg in "$@"; do
    LAST_ARG="$arg"
done

# Extract "cfp" and its argument if present
if [[ "$LAST_ARG" == cfp* ]]; then
    # If it's a cfp command, run it directly
    eval "$LAST_ARG"
else
    # Otherwise, just run the last argument as a command
    eval "$LAST_ARG"
fi
EOF

    chmod +x /usr/bin/mpiexec_cfp
    echo "CFP and MPI wrapper installed successfully"

    # Install the stofs workflow manager
    mkdir -p /home/wcoss2/stofs_workflow
    pip install /home/wcoss2/stofs_workflow
    rm -rf /home/wcoss2/stofs_workflow

    # Set permissions for scripts
    chmod -R +x /home/wcoss2/data/stofs_scripts/stofs_3d_atl
    chmod -R +x /home/wcoss2/sandbox/stofs3d/ush/stofs_3d_atl

    # Copy scripts to expected locations
    cp -p /home/wcoss2/data/stofs_scripts/stofs_3d_atl/* /home/wcoss2/sandbox/stofs3d/scripts/stofs_3d_atl/
    chmod -R +x /home/wcoss2/sandbox/stofs3d/scripts/stofs_3d_atl

    # Set final permissions
    chown -R wcoss2:wcoss2 /home/wcoss2

    # Create build script for future development
    cat > /home/wcoss2/rebuild_stofs.sh << 'EOF'
#!/bin/bash
#
# Script to rebuild STOFS executables from source
# Usage: ./rebuild_stofs.sh [component_name]
#
# If no component specified, builds all components
#

set -e

STOFS_SOURCE_DIR="/home/wcoss2/stofs_source/stofs_sorc"
INSTALL_DIR="/home/wcoss2/sandbox/stofs3d/exec/stofs_3d_atl"

# Set up build environment
export PATH=$PATH:/usr/lib64/openmpi/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/ncep/lib/pkgconfig

COMPONENTS=("stofs_3d_atl_tide_fac" "stofs_3d_atl_netcdf2shef" "stofs_3d_atl_gen_3Dth_from_hycom" "stofs_3d_atl_gen_nudge_from_hycom")

if [ $# -eq 1 ]; then
    COMPONENTS=("$1")
fi

for component in "${COMPONENTS[@]}"; do
    echo "=============================================="
    echo "Building $component..."
    echo "=============================================="
    
    if [ -d "$STOFS_SOURCE_DIR/${component}.fd" ]; then
        cd "$STOFS_SOURCE_DIR/${component}.fd"
        echo "Current directory: $(pwd)"
        
        make clean || echo "Clean failed (might be expected)"
        make
        
        if [ -f "$component" ]; then
            cp -p "$component" "$INSTALL_DIR/"
            echo "Successfully built and installed $component"
        else
            echo "Build failed for $component"
            exit 1
        fi
    else
        echo "ERROR: Cannot find $STOFS_SOURCE_DIR/${component}.fd"
        exit 1
    fi
done

echo "=============================================="
echo "Rebuild completed! Updated executables:"
ls -la "$INSTALL_DIR/"
echo "=============================================="
EOF

    chmod +x /home/wcoss2/rebuild_stofs.sh
    chown wcoss2:wcoss2 /home/wcoss2/rebuild_stofs.sh

    echo "Container build completed with source building capability!"

%environment
    export HDF5_USE_FILE_LOCKING=FALSE
    export PATH=$PATH:/usr/lib64/openmpi/bin:/opt/slurm/bin:/opt/ecflow/bin:/opt/ncep/bin:/opt/wgrib2/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/openmpi/lib:/opt/ecflow/lib
    export PYTHONPATH=$PYTHONPATH:/opt/ecflow/lib/python3.9/site-packages

%runscript
    #!/bin/bash
    echo "STOFS-3D Atlantic Workflow Container with Source Building Capability"
    echo "Starting services..."
    
    # Create temporary directories in writable locations
    export TMPDIR=${TMPDIR:-/tmp}
    export TEMP_CONFIG_DIR="$TMPDIR/stofs_config_$"
    export TEMP_LOG_DIR="$TMPDIR/stofs_logs_$"
    export TEMP_DATA_DIR="$TMPDIR/stofs_data_$"
    
    mkdir -p "$TEMP_CONFIG_DIR" "$TEMP_LOG_DIR" "$TEMP_DATA_DIR"
    
    # Copy configuration files to writable location
    if [ -r /opt/slurm/etc/slurm.conf ]; then
        cp /opt/slurm/etc/slurm.conf "$TEMP_CONFIG_DIR/"
        cp /opt/slurm/etc/slurmdbd.conf "$TEMP_CONFIG_DIR/" 2>/dev/null || true
    fi
    
    # Generate SLURM node configuration in writable location
    echo "[INIT] Generating SLURM node configuration..."
    if [ -f /opt/slurm/etc/get_slurm_node.py ]; then
        python3 /opt/slurm/etc/get_slurm_node.py --output "$TEMP_CONFIG_DIR/auto_nodes.conf" 2>/dev/null || {
            # Fallback: create a simple node configuration
            echo "NodeName=$(hostname) NodeHostname=$(hostname) CPUs=4 Boards=1 SocketsPerBoard=1 CoresPerSocket=2 ThreadsPerCore=2 RealMemory=8192 State=UNKNOWN" > "$TEMP_CONFIG_DIR/auto_nodes.conf"
        }
    fi
    
    # Update slurm configuration file with hostname
    echo "[INIT] Updating the slurm configuration file..."
    if [ -f "$TEMP_CONFIG_DIR/slurm.conf" ]; then
        THISHOST=$(hostname)
        sed -i "s/<<HOSTNAME>>/$THISHOST/g" "$TEMP_CONFIG_DIR/slurm.conf" 2>/dev/null || true
    fi
    
    # Set up environment for services
    export SLURM_CONF="$TEMP_CONFIG_DIR/slurm.conf"
    export SLURMDBD_CONF="$TEMP_CONFIG_DIR/slurmdbd.conf"
    
    # Container status report
    echo "[INIT] Container initialized with source building capability"
    echo "[INIT] Available tools:"
    echo "  - Python: $(python3 --version 2>/dev/null || echo 'not available')"
    echo "  - MPI: $(mpirun --version 2>/dev/null | head -1 || echo 'not available')"
    echo "  - wgrib2: $(wgrib2 -version 2>/dev/null | head -1 || echo 'not available')"
    echo "  - STOFS Workflow: $(python3 -c 'import StofsWorkflow; print("available")' 2>/dev/null || echo 'not available')"
    echo "  - CFP: $(which cfp >/dev/null && echo 'available' || echo 'not available')"
    
    # Check for STOFS executables
    echo "  - STOFS Executables (built from source):"
    if [ -d "/home/wcoss2/sandbox/stofs3d/exec/stofs_3d_atl" ]; then
        for exe in stofs_3d_atl_tide_fac stofs_3d_atl_netcdf2shef stofs_3d_atl_gen_3Dth_from_hycom stofs_3d_atl_gen_nudge_from_hycom; do
            if [ -x "/home/wcoss2/sandbox/stofs3d/exec/stofs_3d_atl/$exe" ]; then
                echo "    $exe"
            else
                echo "    $exe (missing)"
            fi
        done
    else
        echo "    STOFS exec directory not found"
    fi
    
    # Check for source code
    echo "  - STOFS Source Code:"
    if [ -d "/home/wcoss2/stofs_source/stofs_sorc" ]; then
        echo "    Source code available in /home/wcoss2/stofs_source/"
        echo "    Rebuild script: /home/wcoss2/rebuild_stofs.sh"
    else
        echo "    Source code not found"
    fi
    
    # Set up environment
    export PATH=$PATH:/opt/slurm/bin:/opt/ecflow/bin:/opt/ncep/bin:/opt/wgrib2/bin:/usr/lib64/openmpi/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/ecflow/lib:/usr/lib64/openmpi/lib
    export PYTHONPATH=$PYTHONPATH:/opt/ecflow/lib/python3.9/site-packages
    
    echo "[INIT] Environment configured. Starting shell..."
    echo ""
    echo "To rebuild STOFS executables from source, run:"
    echo "  /home/wcoss2/rebuild_stofs.sh"
    echo ""
    
    # If no arguments provided, start interactive shell
    if [ $# -eq 0 ]; then
        exec /bin/bash
    else
        # Execute the provided command
        exec "$@"
    fi

%help
    This is a Singularity container for the STOFS-3D Atlantic Workflow with source building capability.
    
    The container includes:
    - SLURM job scheduler
    - ecFlow workflow manager
    - ADCIRC and SCHISM ocean models
    - NCEP libraries and utilities
    - Complete STOFS workflow scripts and utilities
    - STOFS executables built from source during container build
    - Source code preserved for development and rebuilding
    
    Features:
    - All STOFS executables built from source code
    - Source code preserved in /home/wcoss2/stofs_source/
    - Rebuild script available: /home/wcoss2/rebuild_stofs.sh
    - Full development environment for modifying and rebuilding
    
    To build the container from .def on ParallelWorks:
        sudo singularity build stofs3d_fixed.sif stofs3d_fixed2.def 2>&1 | tee build.log

    To run interactively:
        singularity run stofs3d.sif
    
    To run a specific command:
        singularity exec stofs3d.sif <command>
    
    To rebuild STOFS executables:
        singularity exec stofs3d.sif /home/wcoss2/rebuild_stofs.sh
    
    To rebuild a specific component:
        singularity exec stofs3d.sif /home/wcoss2/rebuild_stofs.sh stofs_3d_atl_tide_fac
    
    To use the STOFS workflow:
        singularity exec stofs3d.sif stofs-workflow prep-forecast --config /path/to/config.yaml

%labels
    Author Mansur Jisan (mansur.jisan@noaa.gov)
    Description STOFS-3D Atlantic Workflow Container with Source Building Capability
    Version v2.1.1
    Features Source building, development environment, rebuild capability